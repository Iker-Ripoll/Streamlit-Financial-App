import yfinance as yf
import pandas as pd
import numpy as np
import streamlit as st
import plotly.graph_objs as go
import os
from dotenv import load_dotenv
import google.generativeai as genai
import datetime

# Cargar configuraci칩n de .env
load_dotenv()

# Configurar API de Gemini con la clave en .env
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Funci칩n para calcular el CAGR (Tasa de Crecimiento Compuesta Anual)
def calcular_cagr(precios, periodos):
    inicio = precios.iloc[0]
    fin = precios.iloc[-1]
    cagr = (fin / inicio) ** (1 / periodos) - 1
    return cagr

# Funci칩n para llamar a Gemini y generar resumen
def llamar_a_gemini(prompt):
    model = genai.GenerativeModel("gemini-pro")
    response = model.generate_content(prompt)
    return response.text.strip()

# Configuraci칩n inicial de Streamlit
st.set_page_config(page_title="An치lisis Financiero", page_icon="游늵", layout="wide")

# T칤tulo centrado
st.markdown("<h1 style='text-align: center;'>An치lisis Financiero Interactivo</h1>", unsafe_allow_html=True)

st.markdown("""
Esta aplicaci칩n permite analizar el desempe침o de una empresa en la bolsa de valores mediante el uso de datos hist칩ricos de precios de acciones y m칠tricas financieras. 
Introduce el ticker de una acci칩n para obtener informaci칩n detallada, gr치ficas y an치lisis.
""")

# Entrada de datos - Ticker de la empresa
ticker = st.text_input("Introduce el Ticker de la Empresa (Ej. AAPL, MSFT, TSLA):")

if ticker:
    # Intentar obtener datos con yfinance
    try:
        empresa = yf.Ticker(ticker)
        info = empresa.info
        precios = empresa.history(period="5y")  # Obtiene datos de 5 a침os

        # Mostrar informaci칩n fundamental
        st.subheader(f"Informaci칩n de {info['shortName']}")
        st.markdown(f"**Sector:** {info['sector']}")
        
        # --- Generar y mostrar resumen traducido y resumido ---
        resumen_largo = info.get("longBusinessSummary", "")
        
        if resumen_largo:
            prompt_resumen = f"""
            Act칰a como un analista financiero biling칲e. Resume y traduce al espa침ol el siguiente perfil empresarial en un texto profesional, claro y orientado a inversionistas. Usa un tono t칠cnico pero comprensible. Lim칤tate a un m치ximo de 300 palabras.

            PERFIL ORIGINAL:
            {resumen_largo}
            """
            resultado_resumen = llamar_a_gemini(prompt_resumen)
            st.subheader("游닂 Resumen de la Empresa (Traducido y Resumido por Gemini)")
            st.markdown(f"<div style='text-align: justify;'>{resultado_resumen}</div>", unsafe_allow_html=True)
        else:
            st.warning("No se encontr칩 un resumen disponible para esta empresa.")
        
        st.markdown("---")

        # Visualizaci칩n de precios hist칩ricos
        st.subheader("游늳 Precio Hist칩rico de Cierre Ajustado")
        fig = go.Figure(data=[go.Scatter(x=precios.index, y=precios['Close'], mode='lines', name='Precio de Cierre Ajustado')])
        fig.update_layout(
            title=f"Precio Hist칩rico de Cierre Ajustado - {ticker} (2019-2024)",
            xaxis_title="Fecha",
            yaxis_title="Precio (USD)",
            template="plotly_dark",
            font=dict(size=14)  # Ajuste de tama침o de texto en el gr치fico
        )
        st.plotly_chart(fig)

        # C치lculo de rendimientos anualizados (CAGR)
        st.subheader("游늳 Rendimientos Anualizados (CAGR)")
        cagr_1 = calcular_cagr(precios['Close'], 1)
        cagr_3 = calcular_cagr(precios['Close'], 3)
        cagr_5 = calcular_cagr(precios['Close'], 5)

        rendimientos = {
            "Periodo": ["1 A침o", "3 A침os", "5 A침os"],
            "CAGR (%)": [round(cagr_1 * 100, 2), round(cagr_3 * 100, 2), round(cagr_5 * 100, 2)]
        }

        st.dataframe(pd.DataFrame(rendimientos))
        st.markdown("""
        **Nota:** El rendimiento anualizado (CAGR) se calcula como el crecimiento compuesto anual del precio de la acci칩n para cada per칤odo.
        """)

        # C치lculo de volatilidad anualizada
        st.subheader("游늴 Volatilidad Anualizada")
        precios["Retornos Diarios"] = precios["Close"].pct_change()
        volatilidad = np.std(precios["Retornos Diarios"].dropna()) * np.sqrt(252)
        st.metric(label="Volatilidad Anualizada (%)", value=f"{round(volatilidad * 100, 2)}%")
        st.markdown("""
        **Nota:** La volatilidad mide el riesgo, basada en la desviaci칩n est치ndar de los retornos diarios de la acci칩n.
        """)

        # Gr치fico adicional de volatilidad (histograma de los retornos diarios)
        st.subheader("游늵 Histograma de los Retornos Diarios")
        fig_volatilidad = go.Figure(data=[go.Histogram(x=precios["Retornos Diarios"].dropna(), nbinsx=50)])
        fig_volatilidad.update_layout(
            title="Histograma de los Retornos Diarios",
            xaxis_title="Retornos Diarios",
            yaxis_title="Frecuencia",
            template="plotly_dark",
            font=dict(size=14)  # Ajuste de tama침o de texto en el gr치fico
        )
        st.plotly_chart(fig_volatilidad)

    except (ValueError, KeyError):
        st.error("*Introduzca un ticker correcto.*")  # Manejamos el error de ticker incorrecto sin romper el c칩digo
else:
    st.info("*Introduce un ticker para comenzar el an치lisis.*")

# Footer
st.markdown("---")
st.markdown("**Desarrollado por Iker Ripoll Solana**")
st.markdown("**Lic. Administraci칩n y Finanzas**")
st.markdown("**ID: 0243449**")
st.markdown("**APP Desarrollada para el Examen de Ingenier칤a Financiera**")
st.markdown("---")
